// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.3
// source: cc/cc.proto

package ccv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Method int32

const (
	Method_NULL                 Method = 0
	Method_GET_COINS            Method = 1
	Method_GET_COIN             Method = 2
	Method_GET_VALUES_PER_DAY   Method = 3
	Method_GET_VALUES_PER_WEEK  Method = 4
	Method_GET_VALUES_PER_MONTH Method = 5
)

// Enum value maps for Method.
var (
	Method_name = map[int32]string{
		0: "NULL",
		1: "GET_COINS",
		2: "GET_COIN",
		3: "GET_VALUES_PER_DAY",
		4: "GET_VALUES_PER_WEEK",
		5: "GET_VALUES_PER_MONTH",
	}
	Method_value = map[string]int32{
		"NULL":                 0,
		"GET_COINS":            1,
		"GET_COIN":             2,
		"GET_VALUES_PER_DAY":   3,
		"GET_VALUES_PER_WEEK":  4,
		"GET_VALUES_PER_MONTH": 5,
	}
)

func (x Method) Enum() *Method {
	p := new(Method)
	*p = x
	return p
}

func (x Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Method) Descriptor() protoreflect.EnumDescriptor {
	return file_cc_cc_proto_enumTypes[0].Descriptor()
}

func (Method) Type() protoreflect.EnumType {
	return &file_cc_cc_proto_enumTypes[0]
}

func (x Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Method.Descriptor instead.
func (Method) EnumDescriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{0}
}

// Два параметра name, symbol исключающие друг друга,
// то есть не может использоваться сразу 2 параметра
type GetCoinsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name   *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"` // Для фильтрации по названию
	Ids    []int32 `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"` // Для фильтрации по id
}

func (x *GetCoinsParams) Reset() {
	*x = GetCoinsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsParams) ProtoMessage() {}

func (x *GetCoinsParams) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsParams.ProtoReflect.Descriptor instead.
func (*GetCoinsParams) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{0}
}

func (x *GetCoinsParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinsParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCoinsParams) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetCoinsParams) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Coins  []*Coin `protobuf:"bytes,2,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *GetCoinsResponse) Reset() {
	*x = GetCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsResponse) ProtoMessage() {}

func (x *GetCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsResponse) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{1}
}

func (x *GetCoinsResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCoinsResponse) GetCoins() []*Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol  string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name    string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon    string  `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Price   float32 `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`     // Текущая ценна на данный момент
	Dynamic float32 `protobuf:"fixed32,6,opt,name=dynamic,proto3" json:"dynamic,omitempty"` // Изменение цены за N времени
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{2}
}

func (x *Coin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Coin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Coin) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Coin) GetDynamic() float32 {
	if x != nil {
		return x.Dynamic
	}
	return 0
}

type GetCoinParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Для выборки
}

func (x *GetCoinParams) Reset() {
	*x = GetCoinParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinParams) ProtoMessage() {}

func (x *GetCoinParams) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinParams.ProtoReflect.Descriptor instead.
func (*GetCoinParams) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{3}
}

func (x *GetCoinParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Coin   *Coin  `protobuf:"bytes,2,opt,name=coin,proto3,oneof" json:"coin,omitempty"`
}

func (x *GetCoinResponse) Reset() {
	*x = GetCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinResponse) ProtoMessage() {}

func (x *GetCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinResponse.ProtoReflect.Descriptor instead.
func (*GetCoinResponse) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{4}
}

func (x *GetCoinResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCoinResponse) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

type GetValuesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Для выборки
}

func (x *GetValuesParams) Reset() {
	*x = GetValuesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValuesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValuesParams) ProtoMessage() {}

func (x *GetValuesParams) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValuesParams.ProtoReflect.Descriptor instead.
func (*GetValuesParams) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{5}
}

func (x *GetValuesParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32       `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Values []*CoinValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GetValuesResponse) Reset() {
	*x = GetValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValuesResponse) ProtoMessage() {}

func (x *GetValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValuesResponse.ProtoReflect.Descriptor instead.
func (*GetValuesResponse) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{6}
}

func (x *GetValuesResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetValuesResponse) GetValues() []*CoinValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type CoinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float32                `protobuf:"fixed32,1,opt,name=price,proto3" json:"price,omitempty"`
	Date  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *CoinValue) Reset() {
	*x = CoinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinValue) ProtoMessage() {}

func (x *CoinValue) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinValue.ProtoReflect.Descriptor instead.
func (*CoinValue) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{7}
}

func (x *CoinValue) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CoinValue) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type GetValuesPerDaysParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Для выборки
	Days int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *GetValuesPerDaysParams) Reset() {
	*x = GetValuesPerDaysParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValuesPerDaysParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValuesPerDaysParams) ProtoMessage() {}

func (x *GetValuesPerDaysParams) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValuesPerDaysParams.ProtoReflect.Descriptor instead.
func (*GetValuesPerDaysParams) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{8}
}

func (x *GetValuesPerDaysParams) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetValuesPerDaysParams) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type GetValuesPerDaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint32       `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Values []*CoinValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GetValuesPerDaysResponse) Reset() {
	*x = GetValuesPerDaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cc_cc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValuesPerDaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValuesPerDaysResponse) ProtoMessage() {}

func (x *GetValuesPerDaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cc_cc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValuesPerDaysResponse.ProtoReflect.Descriptor instead.
func (*GetValuesPerDaysResponse) Descriptor() ([]byte, []int) {
	return file_cc_cc_proto_rawDescGZIP(), []int{9}
}

func (x *GetValuesPerDaysResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetValuesPerDaysResponse) GetValues() []*CoinValue {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_cc_cc_proto protoreflect.FileDescriptor

var file_cc_cc_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x63, 0x2f, 0x63, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x22,
	0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x09, 0x43, 0x6f,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0x5d, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x7a, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x10, 0x05, 0x32, 0xd5, 0x02, 0x0a, 0x02, 0x43, 0x43, 0x12, 0x3c, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x18, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x17, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x17, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65,
	0x6b, 0x12, 0x17, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x17, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d,
	0x5a, 0x0b, 0x78, 0x33, 0x61, 0x2e, 0x63, 0x63, 0x3b, 0x63, 0x63, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cc_cc_proto_rawDescOnce sync.Once
	file_cc_cc_proto_rawDescData = file_cc_cc_proto_rawDesc
)

func file_cc_cc_proto_rawDescGZIP() []byte {
	file_cc_cc_proto_rawDescOnce.Do(func() {
		file_cc_cc_proto_rawDescData = protoimpl.X.CompressGZIP(file_cc_cc_proto_rawDescData)
	})
	return file_cc_cc_proto_rawDescData
}

var file_cc_cc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cc_cc_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_cc_cc_proto_goTypes = []any{
	(Method)(0),                      // 0: assist.Method
	(*GetCoinsParams)(nil),           // 1: assist.GetCoinsParams
	(*GetCoinsResponse)(nil),         // 2: assist.GetCoinsResponse
	(*Coin)(nil),                     // 3: assist.Coin
	(*GetCoinParams)(nil),            // 4: assist.GetCoinParams
	(*GetCoinResponse)(nil),          // 5: assist.GetCoinResponse
	(*GetValuesParams)(nil),          // 6: assist.GetValuesParams
	(*GetValuesResponse)(nil),        // 7: assist.GetValuesResponse
	(*CoinValue)(nil),                // 8: assist.CoinValue
	(*GetValuesPerDaysParams)(nil),   // 9: assist.GetValuesPerDaysParams
	(*GetValuesPerDaysResponse)(nil), // 10: assist.GetValuesPerDaysResponse
	(*timestamppb.Timestamp)(nil),    // 11: google.protobuf.Timestamp
}
var file_cc_cc_proto_depIdxs = []int32{
	3,  // 0: assist.GetCoinsResponse.coins:type_name -> assist.Coin
	3,  // 1: assist.GetCoinResponse.coin:type_name -> assist.Coin
	8,  // 2: assist.GetValuesResponse.values:type_name -> assist.CoinValue
	11, // 3: assist.CoinValue.date:type_name -> google.protobuf.Timestamp
	8,  // 4: assist.GetValuesPerDaysResponse.values:type_name -> assist.CoinValue
	1,  // 5: assist.CC.GetCoins:input_type -> assist.GetCoinsParams
	4,  // 6: assist.CC.GetCoin:input_type -> assist.GetCoinParams
	6,  // 7: assist.CC.GetValuesPerDay:input_type -> assist.GetValuesParams
	6,  // 8: assist.CC.GetValuesPerWeek:input_type -> assist.GetValuesParams
	6,  // 9: assist.CC.GetValuesPerMonth:input_type -> assist.GetValuesParams
	2,  // 10: assist.CC.GetCoins:output_type -> assist.GetCoinsResponse
	5,  // 11: assist.CC.GetCoin:output_type -> assist.GetCoinResponse
	7,  // 12: assist.CC.GetValuesPerDay:output_type -> assist.GetValuesResponse
	7,  // 13: assist.CC.GetValuesPerWeek:output_type -> assist.GetValuesResponse
	7,  // 14: assist.CC.GetValuesPerMonth:output_type -> assist.GetValuesResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_cc_cc_proto_init() }
func file_cc_cc_proto_init() {
	if File_cc_cc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cc_cc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetCoinsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetCoinParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetValuesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CoinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetValuesPerDaysParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cc_cc_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetValuesPerDaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cc_cc_proto_msgTypes[0].OneofWrappers = []any{}
	file_cc_cc_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cc_cc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cc_cc_proto_goTypes,
		DependencyIndexes: file_cc_cc_proto_depIdxs,
		EnumInfos:         file_cc_cc_proto_enumTypes,
		MessageInfos:      file_cc_cc_proto_msgTypes,
	}.Build()
	File_cc_cc_proto = out.File
	file_cc_cc_proto_rawDesc = nil
	file_cc_cc_proto_goTypes = nil
	file_cc_cc_proto_depIdxs = nil
}
