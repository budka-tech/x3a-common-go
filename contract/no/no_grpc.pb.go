// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: no/no.proto

package nov1

import (
	context "context"
	common "github.com/budka-tech/x3a-common-go/contract/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	No_UploadArticles_FullMethodName = "/no.No/UploadArticles"
	No_AddSources_FullMethodName     = "/no.No/AddSources"
)

// NoClient is the client API for No service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoClient interface {
	UploadArticles(ctx context.Context, in *UploadArticlesParams, opts ...grpc.CallOption) (*common.Response, error)
	AddSources(ctx context.Context, in *AddSourcesParams, opts ...grpc.CallOption) (*common.Response, error)
}

type noClient struct {
	cc grpc.ClientConnInterface
}

func NewNoClient(cc grpc.ClientConnInterface) NoClient {
	return &noClient{cc}
}

func (c *noClient) UploadArticles(ctx context.Context, in *UploadArticlesParams, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, No_UploadArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noClient) AddSources(ctx context.Context, in *AddSourcesParams, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, No_AddSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoServer is the server API for No service.
// All implementations must embed UnimplementedNoServer
// for forward compatibility.
type NoServer interface {
	UploadArticles(context.Context, *UploadArticlesParams) (*common.Response, error)
	AddSources(context.Context, *AddSourcesParams) (*common.Response, error)
	mustEmbedUnimplementedNoServer()
}

// UnimplementedNoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoServer struct{}

func (UnimplementedNoServer) UploadArticles(context.Context, *UploadArticlesParams) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadArticles not implemented")
}
func (UnimplementedNoServer) AddSources(context.Context, *AddSourcesParams) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSources not implemented")
}
func (UnimplementedNoServer) mustEmbedUnimplementedNoServer() {}
func (UnimplementedNoServer) testEmbeddedByValue()            {}

// UnsafeNoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoServer will
// result in compilation errors.
type UnsafeNoServer interface {
	mustEmbedUnimplementedNoServer()
}

func RegisterNoServer(s grpc.ServiceRegistrar, srv NoServer) {
	// If the following call pancis, it indicates UnimplementedNoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&No_ServiceDesc, srv)
}

func _No_UploadArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadArticlesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoServer).UploadArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: No_UploadArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoServer).UploadArticles(ctx, req.(*UploadArticlesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _No_AddSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourcesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoServer).AddSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: No_AddSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoServer).AddSources(ctx, req.(*AddSourcesParams))
	}
	return interceptor(ctx, in, info, handler)
}

// No_ServiceDesc is the grpc.ServiceDesc for No service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var No_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "no.No",
	HandlerType: (*NoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadArticles",
			Handler:    _No_UploadArticles_Handler,
		},
		{
			MethodName: "AddSources",
			Handler:    _No_AddSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "no/no.proto",
}
